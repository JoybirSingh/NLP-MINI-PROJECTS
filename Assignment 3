{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/joybanwait/assignment-3?scriptVersionId=182498158\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"### This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"code","source":"from surprise import Dataset, Reader, KNNBasic\nfrom surprise.model_selection import train_test_split\nfrom surprise import accuracy\n\n# Load the built-in MovieLens-100k dataset\ndata = Dataset.load_builtin('ml-100k')\n\n# Split the dataset into train and test sets\ntrainset, testset = train_test_split(data, test_size=0.25)\n\n# Use User-User Collaborative Filtering\nalgo = KNNBasic(sim_options={'user_based': True})\n\n# Train the algorithm on the trainset\nalgo.fit(trainset)\n\n# Test the algorithm on the testset\npredictions = algo.test(testset)\n\n# Compute and print Root Mean Squared Error\naccuracy.rmse(predictions)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-10T04:39:08.177561Z","iopub.execute_input":"2024-06-10T04:39:08.177946Z","iopub.status.idle":"2024-06-10T04:39:23.777513Z","shell.execute_reply.started":"2024-06-10T04:39:08.177904Z","shell.execute_reply":"2024-06-10T04:39:23.776391Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Dataset ml-100k could not be found. Do you want to download it? [Y/n] ","output_type":"stream"},{"output_type":"stream","name":"stdin","text":" y\n"},{"name":"stdout","text":"Trying to download dataset from https://files.grouplens.org/datasets/movielens/ml-100k.zip...\nDone! Dataset ml-100k has been saved to /root/.surprise_data/ml-100k\nComputing the msd similarity matrix...\nDone computing similarity matrix.\nRMSE: 0.9836\n","output_type":"stream"},{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"0.9836124165537196"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Sample data\ndata = {'title': ['The Matrix', 'Toy Story', 'Jurassic Park', 'Shrek'],\n        'description': ['A computer hacker learns about the true nature of his reality.',\n                        'A story of a boy and his toys that come to life.',\n                        'A theme park showcasing cloned dinosaurs turns into a disaster.',\n                        'An ogreâ€™s journey to save a princess.']}\ndf = pd.DataFrame(data)\n\n# Compute the TF-IDF matrix\ntfidf = TfidfVectorizer(stop_words='english')\ntfidf_matrix = tfidf.fit_transform(df['description'])\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n\n# Function to get recommendations\ndef get_recommendations(title, cosine_sim=cosine_sim):\n    idx = df[df['title'] == title].index[0]\n    sim_scores = list(enumerate(cosine_sim[idx]))\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n    sim_scores = sim_scores[1:4]\n    movie_indices = [i[0] for i in sim_scores]\n    return df['title'].iloc[movie_indices]\n\n# Example usage\nprint(get_recommendations('The Matrix'))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-10T04:39:40.764308Z","iopub.execute_input":"2024-06-10T04:39:40.765508Z","iopub.status.idle":"2024-06-10T04:39:41.837051Z","shell.execute_reply.started":"2024-06-10T04:39:40.765463Z","shell.execute_reply":"2024-06-10T04:39:41.835891Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"1        Toy Story\n2    Jurassic Park\n3            Shrek\nName: title, dtype: object\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom surprise import Dataset, Reader, SVD\nfrom surprise.model_selection import train_test_split\nfrom surprise import accuracy\n\n# Example data\ndata = {'user_id': [1, 1, 1, 2, 2, 3, 3, 4, 4, 5],\n        'product_id': [101, 102, 103, 101, 102, 101, 104, 102, 103, 104],\n        'rating': [5, 3, 4, 2, 5, 4, 3, 4, 2, 5]}\ndf = pd.DataFrame(data)\n\n# Convert data into Surprise format\nreader = Reader(rating_scale=(1, 5))\ndata = Dataset.load_from_df(df[['user_id', 'product_id', 'rating']], reader)\n\n# Split the data into train and test sets\ntrainset, testset = train_test_split(data, test_size=0.25)\n\n# Use SVD (Singular Value Decomposition) algorithm\nalgo = SVD()\n\n# Train the algorithm on the trainset\nalgo.fit(trainset)\n\n# Test the algorithm on the testset\npredictions = algo.test(testset)\n\n# Compute and print Root Mean Squared Error\naccuracy.rmse(predictions)\n\n# Function to get product recommendations for a user\ndef get_recommendations(user_id, algo, n=5):\n    # Get a list of all product IDs\n    all_product_ids = df['product_id'].unique()\n    \n    # Predict ratings for all products for the given user\n    predictions = [algo.predict(user_id, pid) for pid in all_product_ids]\n    \n    # Sort the predictions by estimated rating\n    predictions.sort(key=lambda x: x.est, reverse=True)\n    \n    # Get the top n recommendations\n    top_n = predictions[:n]\n    return [(pred.iid, pred.est) for pred in top_n]\n\n# Example usage\nuser_id = 1\nprint(f\"Top recommendations for user {user_id}: {get_recommendations(user_id, algo)}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-06-10T04:39:52.974642Z","iopub.execute_input":"2024-06-10T04:39:52.975136Z","iopub.status.idle":"2024-06-10T04:39:53.03836Z","shell.execute_reply.started":"2024-06-10T04:39:52.975105Z","shell.execute_reply":"2024-06-10T04:39:53.037135Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"RMSE: 1.4235\nTop recommendations for user 1: [(101, 4.34335110579956), (102, 4.34322433060037), (104, 4.204064894772503), (103, 3.966822586597662)]\n","output_type":"stream"}]}]}